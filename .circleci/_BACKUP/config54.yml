version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id: 
        type: string
      event:
        type: string
    steps:
      - run:
          name: Install AWS CLI if not installed - getting access denied
          when: on_fail
          command: |
            if ! [ -x "$(command -v aws)" ]; then
            sudo apt install -y awscli
            else
            echo "AWS CLI already installed"
            fi
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo " Destroying Environment: "-<<parameters.workflow_id>>
            echo " aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive "
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            echo " aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>> "
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
            
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string     
    steps:
      - run:
          name: Revert migrations 
          when: on_fail            # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            # SUCCESS=$(curl https://kvdb.io/GTR2XA6vaM4R8dcWfCQ1i7/migration_<< parameters.workflow_id >>)
            # if(( $SUCCESS==1 )); 
            #then
            #  cd backend
            #  npm install
            #  npm run migrations:revert
            #fi
            cd backend
            #echo "Success: $SUCCESS"
            npm install
            npm run migrations:revert  ##@@ REVERT MIGRATIONS regardless

defaults: &defaults   ## anchor & aliases
    docker:
      - image: circleci/node:13.8.0

jobs:
  build-frontend:
    <<: *defaults  
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
            npm audit fix --audit-level=moderate  # --force
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    <<: *defaults  
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
            npm audit fix --audit-level=moderate   # --force
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *defaults  
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Run Frontend Test
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  test-backend:
    <<: *defaults  
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Run Backend Test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  scan-frontend:
    <<: *defaults  
    steps: 
      - checkout                   # Checkout code from git
      - restore_cache:             # Restore from cache
          keys: [frontend-build]
      - run:                       # Your job code here
          name: Scan frontend Dependencies
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical # --force        

  scan-backend:
    <<: *defaults  
    steps: 
      - checkout                   # Checkout code from git
      - restore_cache:             # Restore from cache
          keys: [backend-build]
      - run:                       # Your job code here
          name: Scan Backend Dependencies
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical         # --force
#            npm audit --audit-level=critical   
            

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli     # Docker image here that supports AWS CLI
    steps:
      - checkout      # Checkout code from git
      - run: yum -y install tar gzip   # run as shell script #      - run: yum -y install gzip - dont need this runs both in  one line
      - run: 
          name: DEPLOY INFRA  Ensure BACKEND infrastructure exist and capture Backend IP (4 ansible)
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
              BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
              echo "workflowID:  ${CIRCLE_WORKFLOW_ID:0:7}"
              echo $BACKEND_PUBLIC_IP>>.circleci/ansible/inventory.txt   
              pwd
              echo "$BACKEND_PUBLIC_IP"
              echo "BACKEND_PUBLIC_IP=$BACKEND_PUBLIC_IP"
              cat ./.circleci/ansible/inventory.txt
              curl https://kvdb.io/HmphVaHTVRNxCdTSX6zsLJ/BACKEND_PUBLIC_IP_${CIRCLE_WORKFLOW_ID:0:7} -d "${BACKEND_PUBLIC_IP}"
      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
              
      - run:
          name: DDEPLOY INFRA Ensure FRONTEND  infrastructure exist & capture S3Name
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
              echo "workflowID:  ${CIRCLE_WORKFLOW_ID:0:7}"
              S3Name=$(aws s3 ls | grep udapeople)
              echo " s3Name: $S3Name"
              N=3
              arr=($S3Name)
              CutS3=${arr[N-1]}
              echo " CutS3 : $CutS3"
              curl https://kvdb.io/U9HGBYGCvurKDMVqTuNQLH/S3Name_${CIRCLE_WORKFLOW_ID:0:7} -d $CutS3

      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail
          
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ['cf:73:39:88:ac:09:a1:85:0a:6d:64:b6:ab:8a:58:77'] 
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible 
            apk upgrade
            apk add unzip 
            apk add python3
            apk add curl 
            /usr/local/bin/python -m pip install --upgrade pip  
            pip install awscli --upgrade   
            ansible --version  
            aws --version
      - run:
          name: CONFIGURE INFRA config-server - 2 roles
          command: |
            cat /tmp/.circleci/ansible/inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail
          
  run-migrations:  #3
    <<: *defaults 
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install awscli
          command: |
            sudo apt-get update
            sudo apt-get install -y awscli curl 
      - run:
          name: RUN MIGRATIONS 
          no_output_timeout: 12m
          command: |
            cd backend
            echo ENVIRONMENT=production > ".env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> ".env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> ".env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> ".env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> ".env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> ".env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> ".env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> ".env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> ".env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> ".env"
            npm install
            touch migrations_dump.txt
            ls -la
            npm run migrations >> migrations_dump.txt
            cat migrations_dump.txt
            cat .env
            
#            npm cache clean --force
      - run:
          name: Send migration results persistant txt file
          command: | 
            cd backend
            pwd
            cat migrations_dump.txt
            result=0          
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              result=1
            fi  
            echo "result: $result"
            echo $result >> migration-results.txt            
      - persist_to_workspace:
          root: ~/
          paths:
            - project/backend/migration-results.txt
#      - run: exit 1   ###@@@ TO REVERT MIGRATIONS
#                echo "insecure" >> ~/.curlr        
            #            curl https://kvdb.io/GTR2XA6vaM4R8dcWfCQ1i7/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d $result
     # Here's where you will add some code to rollback on failure      
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          
          
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip 
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
            cd frontend
            npm install webpack-dev-server -g
            npm install
            aws --version  
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo API_URL="http://${BACKEND_IP}:3030" >> "frontend/.env"
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |  
            cd frontend
            cat .env
            npm run build
            aws s3 cp ./dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive  #Copies a local file or S3 object to another location locally or in S3.
            aws s3 ls | grep udapeople
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 

       
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "cf:73:39:88:ac:09:a1:85:0a:6d:64:b6:ab:8a:58:77"
      - attach_workspace:
          at: /tmp/.circleci/ansible        #.circleci/ansible
      - run:
          name: Install Dependencies
          command: |
            apk add --update ansible
            ansible --version
            apk add curl
            apk add openssh-client
            pip3 install awscli
            aws --version
#            npm install
#            npm audit fix
#            sudo npm cache clean -f
      - run:
          name: Check what path you at
          command: |
            echo $(pwd)                     #/root/project
            ls /root/project/backend 
      - run:
          name: Configure backend server
          command: |
            cd backend
            npm i
            npm run build
            cp package* ./dist
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible/
            pwd
            ls -la
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt deploy-backend.yml
            cat inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 

          
  smoke-test:
    <<: *defaults 
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt update
            sudo apt upgrade -y
            sudo apt install -y curl
            sudo apt install -y awscli
            aws --version
      - run:
          name: Backend Smoke Test
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output text)
              export API_URL="http://${BACKEND_IP}:3030"
              echo "API_URL = ${API_URL}"
              sleep 60
              if curl "${API_URL}/api/status" | grep "ok"
              then
                echo SUCCESS
                exit 0
              else
                echo FAIL
                exit 1
              fi
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            ${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com/#/employees"
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.us-east-1.amazonaws.com"
              echo ${URL}
              if curl -s ${URL} | grep "Welcome"
              then
              # return 0
                exit 0
              else
                exit 1
              fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 

          
  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/python:3.9
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
            sudo apt-get install -y curl tar gzip
            pip3 install awscli
      - run:
          name: Update cloudfront distribution
          command: |
            #your code here
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            echo $OldWorkflowID >> ~/OldWorkflowID.txt
            cat ~/OldWorkflowID.txt
            aws cloudformation deploy \
            --template-file .circleci/files/cloudfront.yml \
            --stack-name InitialStack \
            --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
            --tags project=udapeople
            echo OldWorkflowID: "${OldWorkflowID}"
            echo Current Workflow Id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - persist_to_workspace:
          root: ~/
          paths:
            - OldWorkflowID.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Get old stack workflow id
          command: |
            # get oldworkflow
            cat ~/OldWorkflowID.txt
            OldWorkflowID=$(cat ~/OldWorkflowID.txt)
            echo OldWorkflowID: "${OldWorkflowID}"
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo Stack names: "${STACKS[@]}"
      - run:
          name: Remove old stacks and files
          command: |
            cat ~/OldWorkflowID.txt
            OldWorkflowID=$(cat ~/OldWorkflowID.txt)
            echo OldWorkflowID: "${OldWorkflowID}"
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
               echo "---deleting---"
              aws s3 rb "s3://${OldWorkflowID}" --force
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID:10:7}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID:10:7}"
            fi
            
workflows:
  CICDPipeline:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]  
      - deploy-infrastructure:    
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#          filters:
#            branches:
#              only: [test-feature-branch]  # this makes it not run the job..... ?#
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]    
      - deploy-frontend:
         requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]    
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
