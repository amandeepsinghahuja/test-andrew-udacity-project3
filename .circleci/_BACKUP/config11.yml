version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id: 
        type: string
      event:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo " Destroying Environment: "-<<parameters.workflow_id>>
            echo " aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive "
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            echo " aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>> "
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
# aws s3 rm s3://udapeople << parameters.workflow_id >> --recursive  ## didn't delete!
#  aws s3 rb --force s3://udapeople << parameters.workflow_id >> 

defaults: &defaults   ## anchor & aliases
    docker:
      - image: circleci/node:13.8.0

jobs:
  build-frontend:
    <<: *defaults  
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    <<: *defaults  
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *defaults  
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Run Frontend Test
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  test-backend:
    <<: *defaults  
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Run Backend Test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  scan-frontend:
    <<: *defaults  
    steps: 
      - checkout                   # Checkout code from git
      - restore_cache:             # Restore from cache
          keys: [frontend-build]
      - run:                       # Your job code here
          name: Scan frontend Dependencies
          command:
            cd frontend
            npm install
            npm audit --audit-level=critical || true

  scan-backend:
    <<: *defaults  
    steps: 
      - checkout                   # Checkout code from git
      - restore_cache:             # Restore from cache
          keys: [backend-build]
      - run:                       # Your job code here
          name: Scan Backend Dependencies
          command:
            cd backend
            npm install
            npm audit --audit-level=critical || true

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli     # Docker image here that supports AWS CLI
#    branches:                     # shows where this job can only be run on (certain branches)
#      only:
#        - master
#        - /rc-.*/     # any branch that starts with rc.... 
    steps:
      - checkout      # Checkout code from git
      - run: yum -y install tar gzip   # run as shell script #      - run: yum -y install gzip
      - run: 
          name: Ensure back-end infrastructure is in place already
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist & capture S3Name
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              echo aws s3 ls 

               
      - run:             
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=instance-type,Values=t2.micro" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            echo $BACKEND_PUBLIC_IP>>.circleci/ansible/inventory.txt   
            pwd
            echo "$BACKEND_PUBLIC_IP"
            cat ./.circleci/ansible/inventory.txt
            curl https://kvdb.io/HmphVaHTVRNxCdTSX6zsLJ/S3Name_${CIRCLE_WORKFLOW_ID:0:7} -d '$BACKEND_PUBLIC_IP'



#            curl https://kvdb.io/BMUk3Gs9UKHjMf4M37iWhi/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '$BACKEND_PUBLIC_IP'
     
          

      - persist_to_workspace:
            root: .circleci/ansible
            paths:
              - inventory.txt      

      - persist_to_workspace:       # Here's where you will add some code to rollback on failure  
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail

workflows:
  CICDPipeline:
    jobs:
      - deploy-infrastructure
#          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#          filters:
#            branches:
#              only: [test-feature-branch]  # this makes it not run the job..... ?#
#      - configure-infrastructure:
#          requires: [deploy-infrastructure]

