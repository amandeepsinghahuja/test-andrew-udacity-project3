version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id: 
        type: string
      event:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo " Destroying Environment: "-<<parameters.workflow_id>>
            echo " aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive "
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>>
            echo " aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflow_id>> "
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflow_id>>
# aws s3 rm s3://udapeople << parameters.workflow_id >> --recursive  ## didn't delete!
#  aws s3 rb --force s3://udapeople << parameters.workflow_id >> 

defaults: &defaults   ## anchor & aliases
    docker:
      - image: circleci/node:13.8.0

jobs:
  build-frontend:
    <<: *defaults  
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    <<: *defaults  
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    <<: *defaults  
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Run Frontend Test
          command: |
            cd frontend
            npm install
            npm run test
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  test-backend:
    <<: *defaults  
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run: 
          name: Run Backend Test
          command: |
            cd backend
            npm install
            npm run test
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  scan-frontend:
    <<: *defaults  
    steps: 
      - checkout                   # Checkout code from git
      - restore_cache:             # Restore from cache
          keys: [frontend-build]
      - run:                       # Your job code here
          name: Scan frontend Dependencies
          command:
            cd frontend
            npm install
            npm audit --audit-level=critical || true

  scan-backend:
    <<: *defaults  
    steps: 
      - checkout                   # Checkout code from git
      - restore_cache:             # Restore from cache
          keys: [backend-build]
      - run:                       # Your job code here
          name: Scan Backend Dependencies
          command:
            cd backend
            npm install
            npm audit --audit-level=critical || true

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli     # Docker image here that supports AWS CLI
    steps:
      - checkout      # Checkout code from git
      - run: yum -y install tar gzip   # run as shell script #      - run: yum -y install gzip - dont need this runs both in  one line
      - run: 
          name: Ensure back-end infrastructure exist and capture Backend IP (4 ansible)
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
              BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=instance-type,Values=t2.micro" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
              echo "workflowID:  {CIRCLE_WORKFLOW_ID:0:7}"
              echo $BACKEND_PUBLIC_IP>>.circleci/ansible/inventory.txt   
              pwd
              echo "$BACKEND_PUBLIC_IP"
              echo "BACKEND_PUBLIC_IP=$BACKEND_PUBLIC_IP"
              cat ./.circleci/ansible/inventory.txt
              curl https://kvdb.io/HmphVaHTVRNxCdTSX6zsLJ/S3Name_${CIRCLE_WORKFLOW_ID:0:7} -d "${BACKEND_PUBLIC_IP}"
      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
              
      - run:
          name: Ensure front-end infrastructure exist & capture S3Name
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
              echo "workflowID:  {CIRCLE_WORKFLOW_ID:0:7}"
              S3Name=$(aws s3 ls | grep udapeople)
              echo " s3Name: $S3Name"
              N=3
              arr=($S3Name)
              CutS3=${arr[N-1]}
              echo " CutS3 : $CutS3"
              curl https://kvdb.io/U9HGBYGCvurKDMVqTuNQLH/S3Name_${CIRCLE_WORKFLOW_ID:0:7} -d $CutS3

      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ['cf:73:39:88:ac:09:a1:85:0a:6d:64:b6:ab:8a:58:77'] 
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible 
            apk upgrade
            apk add unzip 
            apk add python3
            apk add curl
            /usr/local/bin/python -m pip install --upgrade pip  
            ansible --version            
            pip install awscli --upgrade   
            aws --version  
      - run:
          name: Configure server
          command: |
            cat /tmp/.circleci/ansible/inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
          event: on_fail

workflows:
  CICDPipeline:
    jobs:
      - deploy-infrastructure
#          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
#          filters:
#            branches:
#              only: [test-feature-branch]  # this makes it not run the job..... ?#
      - configure-infrastructure:
          requires: [deploy-infrastructure]

